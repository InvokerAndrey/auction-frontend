{"ast":null,"code":"import axios from 'axios';\nimport { AUCTION_LIST_REQUEST, AUCTION_LIST_SUCCESS, AUCTION_LIST_FAIL, AUCTION_DETAIL_REQUEST, AUCTION_DETAIL_SUCCESS, AUCTION_DETAIL_FAIL } from '../constants/auctionConstants';\nimport { OFFER_MAKE_REQUEST, OFFER_MAKE_SUCCESS, OFFER_MAKE_FAIL } from '../constants/offerConstants';\nexport default class AuctionService {\n  constructor() {\n    this.BASE_URL = 'http://127.0.0.1:8000/api/auction/';\n    this.LIST_URL = this.BASE_URL + 'list/';\n\n    this.listAuctions = (params = {}) => async dispatch => {\n      try {\n        dispatch({\n          type: AUCTION_LIST_REQUEST\n        });\n        const {\n          data\n        } = await axios.get(this.LIST_URL, params);\n        dispatch({\n          type: AUCTION_LIST_SUCCESS,\n          payload: data\n        });\n      } catch (error) {\n        dispatch({\n          type: AUCTION_LIST_FAIL,\n          payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n        });\n      }\n    };\n\n    this.getAuctionDetail = id => async dispatch => {\n      try {\n        dispatch({\n          type: AUCTION_DETAIL_REQUEST\n        });\n        const {\n          data\n        } = await axios.get(this.BASE_URL + `${id}/`);\n        dispatch({\n          type: AUCTION_DETAIL_SUCCESS,\n          payload: data\n        });\n      } catch (error) {\n        dispatch({\n          type: AUCTION_DETAIL_FAIL,\n          payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n        });\n      }\n    };\n\n    this.makeOffer = (id, price) => async (dispatch, getState) => {\n      try {\n        dispatch({\n          type: OFFER_MAKE_REQUEST\n        });\n        const {\n          userLogin: {\n            userInfo\n          }\n        } = getState();\n        const config = {\n          headers: {\n            'Content-type': 'application/json',\n            Authorization: `Bearer ${userInfo.token}`\n          }\n        };\n        const {\n          data\n        } = await axios.post(this.BASE_URL + `${id}/make-offer/`, price, config);\n        dispatch({\n          type: OFFER_MAKE_SUCCESS\n        });\n      } catch (error) {\n        dispatch({\n          type: OFFER_MAKE_FAIL,\n          payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n        });\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/andrei/Documents/auctionproject/frontend/src/services/AuctionService.js"],"names":["axios","AUCTION_LIST_REQUEST","AUCTION_LIST_SUCCESS","AUCTION_LIST_FAIL","AUCTION_DETAIL_REQUEST","AUCTION_DETAIL_SUCCESS","AUCTION_DETAIL_FAIL","OFFER_MAKE_REQUEST","OFFER_MAKE_SUCCESS","OFFER_MAKE_FAIL","AuctionService","BASE_URL","LIST_URL","listAuctions","params","dispatch","type","data","get","payload","error","response","detail","message","getAuctionDetail","id","makeOffer","price","getState","userLogin","userInfo","config","headers","Authorization","token","post"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { \n    AUCTION_LIST_REQUEST,\n    AUCTION_LIST_SUCCESS,\n    AUCTION_LIST_FAIL,\n\n    AUCTION_DETAIL_REQUEST,\n    AUCTION_DETAIL_SUCCESS,\n    AUCTION_DETAIL_FAIL,\n } from '../constants/auctionConstants'\n\nimport {\n    OFFER_MAKE_REQUEST,\n    OFFER_MAKE_SUCCESS,\n    OFFER_MAKE_FAIL\n } from '../constants/offerConstants'\n\n\nexport default class AuctionService {\n    BASE_URL = 'http://127.0.0.1:8000/api/auction/'\n    LIST_URL = this.BASE_URL + 'list/'\n\n    listAuctions = (params={}) => async (dispatch) => {\n        try {\n            dispatch({type: AUCTION_LIST_REQUEST})\n            \n            const {data} = await axios.get(this.LIST_URL, params)\n    \n            dispatch({\n                type: AUCTION_LIST_SUCCESS,\n                payload: data,\n            })\n        } catch (error) {\n            dispatch({\n                type: AUCTION_LIST_FAIL,\n                payload: error.response && error.response.data.detail\n                    ? error.response.data.detail\n                        : error.message,\n            })\n        }\n    }\n\n    getAuctionDetail = (id) => async (dispatch) => {\n        try {\n            dispatch({type: AUCTION_DETAIL_REQUEST})\n\n            const {data} = await axios.get(this.BASE_URL + `${id}/`)\n\n            dispatch({\n                type: AUCTION_DETAIL_SUCCESS,\n                payload: data,\n            })\n        } catch (error) {\n            dispatch({\n                type: AUCTION_DETAIL_FAIL,\n                payload: error.response && error.response.data.detail\n                    ? error.response.data.detail\n                        : error.message,\n            })\n        }\n    }\n\n    makeOffer = (id, price) => async (dispatch, getState) => {\n        try {\n            dispatch({type: OFFER_MAKE_REQUEST})\n\n            const {\n                userLogin: {userInfo}\n            } = getState()\n\n            const config = {\n                headers: {\n                    'Content-type': 'application/json',\n                    Authorization: `Bearer ${userInfo.token}`\n                }\n            }\n\n            const {data} = await axios.post(\n                this.BASE_URL + `${id}/make-offer/`,\n                price,\n                config\n                )\n\n            dispatch({type: OFFER_MAKE_SUCCESS})\n        } catch (error) {\n            dispatch({\n                type: OFFER_MAKE_FAIL,\n                payload: error.response && error.response.data.detail\n                    ? error.response.data.detail\n                        : error.message,\n            })\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}